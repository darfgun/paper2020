subset2
subset2[1:3,1:3]
subset2[1:2,1:2]
subset2[1,1]
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#subset[]
subset2 <- lapply(subset, 1, FUN = function(long_ind, lat_ind){
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
subset2<-as.data.frame(subset2)
subset2
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#subset[]
subset2 <- lapply(subset, 2, FUN = function(long_ind, lat_ind){
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
subset2<-as.data.frame(subset2)
subset2
long_subset<-long_vec[long_row_min:long_row_max]
lat_subset <- lat_vec[lat_row_min:lat_row_max]
pm_subset <- exp_data[long_row_min:long_row_max,lat_row_min:lat_row_max]
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- sapply(subset, 1, FUN = function(long_ind, lat_ind){
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
subset2<-as.data.frame(subset2)
subset2
long <- long_subset[long_ind]
long_subset
lat_subset
long_subset<-long_vec[long_row_min:long_row_max]
lat_subset <- lat_vec[lat_row_min:lat_row_max]
pm_subset <- exp_data[long_row_min:long_row_max,lat_row_min:lat_row_max]
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- sapply(subset, 1, FUN = function(long_ind, lat_ind){
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- sapply(subset, 1, FUN = function(long_ind, lat_ind){
print(c(long_ind,lat_ind))
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- sapply(subset, 1, FUN = function(long_ind, lat_ind){
print(c("long",long_ind,"lat",lat_ind))
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
subset
#print(c("long",long_ind,"lat",lat_ind))
long <- long_subset[long_ind]
long
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
long
lat
pm
df = data.frame(
a = c(1, 2, 3),
b = c(4, 5, 6),
c = c(7, 8, 9)
)
process_row = function(row) {
row = row[1,]
new_col_name = paste("[", paste(colnames(row), collapse = "+"), "]", sep = "")
row[[new_col_name]] = sum(row[1,])
return (row)
}
# For Loop
df_list <- vector(mode = "list", length = nrow(df))
for (r_num in 1:nrow(df)) {
df_list[[r_num]] <- process_row(df[r_num, ])
}
df_out_loop <- do.call(rbind, df_list)
# lapply
df_list <- lapply(1:nrow(df), function(r_num) { process_row(df[r_num, ]) })
df_out_lapply <- do.call(rbind, df_list)
# purrr::map_dfr
library(purrr)
df_out_map <- map_dfr(
1:nrow(df),
~ process_row(df[.x, ])
)
df_out_loop
df_out_lapply
df_out_map
?map_dfr
class(df_out_lapply)
# lapply
df_out_lapply <- lapply(1:nrow(df), function(r_num) { process_row(df[r_num, ]) }) %>%
do.call(rbind, .)
df_out_lapply
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
class(long_ind)
long_ind[1]
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- sapply(subset, 1, FUN = function(long_ind, lat_ind){
#print(c("long",long_ind,"lat",lat_ind))
long <- long_subset[long_ind[1]]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
subset2<-as.data.frame(subset2)
subset2
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
return(c(long,lat,pm))
#print(c("long",long_ind,"lat",lat_ind))
long <- long_subset[long_ind[1]]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
pm <- pm_subset[long_ind,lat_ind[1]]
pm <- pm_subset[long_ind,lat_ind[1]]
pm <- pm_subset[long_ind[1],lat_ind]
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- sapply(subset, 1, FUN = function(long_ind, lat_ind){
#print(c("long",long_ind,"lat",lat_ind))
long <- long_subset[long_ind[1]]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind[1],lat_ind]
return(c(long,lat,pm))
})
subset2<-as.data.frame(subset2)
subset2
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
subset
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- apply(subset, 1, FUN = function(long_ind, lat_ind){
#print(c("long",long_ind,"lat",lat_ind))
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
subset2<-as.data.frame(subset2)
subset2
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
long_subset<-long_vec[long_row_min:long_row_max]
long_subset
lat_subset
pm_subset
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
subset
5+7
source('~/Desktop/own_code2/code/02_ass_trac.R')
x<-4
y<- 3
long<- long_subset[1:x] # Koordinaten Longtitude
lat<-lat_subset[1:y] #Koordinaten Lattitude
pm<- pm_subset[1:x,1:y] # Feinstaub belastung von korrespondierenden Koordinaten
ziel <- data.frame(lat = lat_subset, long = rep(long_subset[1], length(x)), pm = pm_subset[1,])
long
long
lat
pm
ziel
#Ansatz
subset <- expand.grid(longX = seq_along(long), latY = seq_along(lat)) %>% #karthesisches Produkt
mutate(pm = pm[longX,latY] ,longX = long[longX], latY = lat[latY])
#Aber: Ausgabe:
subset
# GitHub packages
library(devtools)
library(tigris)
plot(combined)
library(censusapi)
library(tidyverse)
library(tmap)
chi_counties <- c("Cook", "DeKalb", "DuPage", "Grundy", "Lake",
"Kane", "Kendall", "McHenry", "Will County")
chi_tracts <- tracts(state = "IL", county = chi_counties, cb = TRUE)
key <- "d44ca9c0b07372ada0b5243518e89adcc06651ef"
data_from_api <- getCensus(name = "acs/acs5", vintage = 2015,
vars = c("B25077_001E"),
key = key,
region = "tract:*", regionin = "state:17")
?transmute
values <- data_from_api %>%
transmute(GEOID = paste0(state, county, tract),
value = B25077_001E)
chi_joined = geo_join(chi_tracts, values, by = "GEOID")
tm_shape(chi_joined, projection = 26916) +
tm_fill("value", style = "quantile", n = 7, palette = "Greens",
title = "Median home values \nin the Chicago Area") +
tm_legend(bg.color = "white", bg.alpha = 0.6) +
tm_style_gray()
tm_shape(chi_joined, projection = 26916) +
tm_fill("value", style = "quantile", n = 7, palette = "Greens",
title = "Median home values \nin the Chicago Area") +
tm_legend(bg.color = "white", bg.alpha = 0.6) #+
ttm()
tm_shape(chi_joined, projection = 26916) +
tm_fill("value", style = "quantile", n = 7, palette = "Greens",
title = "Median home values \nin the Chicago Area")
tracts
tracts
source('~/Desktop/own_code2/code/02_ass_trac.R')
tracts
tracts <- subset(tracts, select = -c("Geometry"))
tracts <- subset(tracts, select = -"Geometry")
within(tracts, rm('Geometry'))
tracts <- subset(tracts, select = -"geometry")
within(tracts, rm('geometry'))
tracts <-as.data.frame(tracts)
tracts
tracts <- subset(tracts, select = -"geometry")
within(tracts, rm('geometry'))
source('~/Desktop/own_code2/code/02_ass_trac.R')
tracts
##-----save as csv--------
tracts <-tracts %>%
as.data.frame %>%
within(., rm('geometry', 'LSAD', 'CENSUSAREA'))
source('~/Desktop/own_code2/code/02_ass_trac.R')
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7))
# load packages, install if missing
packages <- c("dplyr", "RCurl","magrittr", "tigris", "censusapi","tictoc")
options(tigris_use_cache = FALSE)
for(p in packages){
if(p %in% rownames(installed.packages())==FALSE){
install.packages(p)
}
suppressMessages(library(p, character.only = T, warn.conflicts=FALSE))
}
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7))
View(states)
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7)) %>%
arrange(3)
states
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7)) %>%
arrange(STATEFP)
states
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7)) %>%
arrange(STATEFP) %>%
filter(1:51)
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7)) %>%
arrange(STATEFP) %>%
filter(Statefp <= 56)
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7)) %>%
arrange(STATEFP) %>%
filter(STATEFP <= 56)
states
View(states)
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
?paste0
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
load("~/Desktop/own_code2/data/02_tracts/2000/tracts_2000_AK.rds")
filepathTr
source('~/Desktop/own_code2/code/00_parent.R')
load("~/Desktop/tracts_2000 16.48.33.rds")
year<-2000
###------------------download tract shape files--------------------
filepathTr <- file.path(tracDir, toString(year))
if (!file.exists(filepathTr)){
dir.create(filepathTr)
}
##------download useful data to tmp-----
filepathStates <- file.path(tmpDir, "states.csv")
states <- read.csv(filepathStates)
states
x<-states[1,]
x
STUSPS<-x[4]
name<-x[5]
filepathTr <- paste("tracts",toString(year),STUSPS,sep="_") %>%
paste0(.,".rds")%>%
file.path(filepathTr, .)
filepathTr
print(paste("Downloading census tracts for",year,name))
tracts <- tracts(state = STUSPS, cb = TRUE, year=year)
tracts
saveRDS(tracts, filepathTr)
saveRDS(tracts, filepathTr)
load("~/Desktop/own_code2/data/02_tracts/2000/tracts_2000_AL.rds")
filepathTr <- file.path(filepathTr, "a.rds")
saveRDS(tracts, filepathTr)
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
load("~/Desktop/own_code2/data/02_tracts/2000/tracts_2000_AK.rds")
##TODO löschen
states <- read.csv(filepathStates)
##TODO löschen
filepathStates <- file.path(tmpDir, "states.csv")
states <- read.csv(filepathStates)
x<-states[1,]
x
STUSPS<-x[4]
#print(filepathTrX)
filepathTr <- file.path(filepathTr, "a.rds")
###------------------download tract shape files--------------------
filepathTr <- file.path(tracDir, toString(year))
#print(filepathTrX)
filepathTr <- file.path(filepathTr, "a.rds")
tracts <- tracts(state = STUSPS, cb = TRUE, year=year)
saveRDS(tracts, filepathTrX)
#print(filepathTrX)
filepathTrX <- file.path(filepathTr, "a.rds")
saveRDS(tracts, filepathTrX)
###------------------download tract shape files--------------------
filepathTr <- file.path(tracDir, toString(year))
filepathTrX
###------------------download tract shape files--------------------
filepathTr <- file.path(tracDir, toString(year))
filepathTr
#print(filepathTrX)
filepathTrX <- file.path(filepathTr, "a.rds")
filepathTrX
saveRDS(tracts, filepathTrX)
filepathTrX
tracts<-readRDS(filepathTrX)
tracts
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
#TODO remove Alaska, Hawaii, American Samoa
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7)) %>%
filter(STATEFP <= 56) %>%
arrange(STATEFP)
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7)) %>%
filter(!(name %in% 'Hawaii')) %>%
arrange(STATEFP)
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7)) %>%
filter(!(NAME %in% 'Hawaii')) %>%
arrange(STATEFP)
states
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7)) %>%
filter(!(STATEFP %in% c('AK','AS','GU','MP','PR','VI'))) %>%
arrange(STATEFP)
states
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7)) %>%
filter(!(STATEFP %in% c('AK','AS','GU','MP','PR','VI'))) %>%
arrange(STATEFP)
states
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7)) %>%
filter((STATEFP %in% c('AK','HI','AS','GU','MP','PR','VI'))) %>%
arrange(STATEFP)
states
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7)) %>%
filter(!(STATEFP %in% c("AK",'HI','AS','GU','MP','PR','VI'))) %>%
arrange(STATEFP)
states
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7)) %>%
filter((STATEFP %in% c("AK",'HI','AS','GU','MP','PR','VI'))) %>%
arrange(STATEFP)
states
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7)) %>%
#filter((STATEFP %in% c("AK",'HI','AS','GU','MP','PR','VI'))) %>%
.[STATEFP %in% c("AK",'HI','AS','GU','MP','PR','VI'),]
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7)) %>%
#filter((STATEFP %in% c("AK",'HI','AS','GU','MP','PR','VI'))) %>%
.[STATEFP %in% c("AK",'HI','AS','GU','MP','PR','VI'),]%>%
arrange(STATEFP)
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7)) %>%
#filter((STATEFP %in% c("AK",'HI','AS','GU','MP','PR','VI'))) %>%
#.[STATEFP %in% c("AK",'HI','AS','GU','MP','PR','VI'),]%>%
subset(.[,STATEFP] == 16)
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7)) %>%
#filter((STATEFP %in% c("AK",'HI','AS','GU','MP','PR','VI'))) %>%
#.[STATEFP %in% c("AK",'HI','AS','GU','MP','PR','VI'),]%>%
#subset(.[,STATEFP] == 16)
#arrange(STATEFP)
states
write.csv(states,filepathStates, row.names = FALSE)
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7)) %>%
#filter((STATEFP %in% c("AK",'HI','AS','GU','MP','PR','VI'))) %>%
#.[STATEFP %in% c("AK",'HI','AS','GU','MP','PR','VI'),]%>%
#subset(.[,STATEFP] == 16) %>%
arrange(STATEFP)
states
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7)) %>%
#filter((STATEFP %in% c("AK",'HI','AS','GU','MP','PR','VI'))) %>%
filter(REGION == 3) %>%
#.[STATEFP %in% c("AK",'HI','AS','GU','MP','PR','VI'),]%>%
#subset(.[,STATEFP] == 16) %>%
arrange(STATEFP)
states
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7)) %>%
#filter((STATEFP %in% c("AK",'HI','AS','GU','MP','PR','VI'))) %>%
filter(STATEFP == "AK") %>%
#.[STATEFP %in% c("AK",'HI','AS','GU','MP','PR','VI'),]%>%
#subset(.[,STATEFP] == 16) %>%
arrange(STATEFP)
states
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7)) %>%
#filter((STATEFP %in% c("AK",'HI','AS','GU','MP','PR','VI'))) %>%
filter(NAME == Alaska) %>%
#.[STATEFP %in% c("AK",'HI','AS','GU','MP','PR','VI'),]%>%
#subset(.[,STATEFP] == 16) %>%
arrange(STATEFP)
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7)) %>%
#filter((STATEFP %in% c("AK",'HI','AS','GU','MP','PR','VI'))) %>%
filter(NAME == 'Alaska') %>%
#.[STATEFP %in% c("AK",'HI','AS','GU','MP','PR','VI'),]%>%
#subset(.[,STATEFP] == 16) %>%
arrange(STATEFP)
states
t
states<-states() %>%
as.data.frame %>%
select(c(1:3,6,7)) %>%
filter((STUSPS %in% c("AK",'HI','AS','GU','MP','PR','VI'))) %>%
#filter(NAME == 'Alaska') %>%
#.[STATEFP %in% c("AK",'HI','AS','GU','MP','PR','VI'),]%>%
#subset(.[,STATEFP] == 16) %>%
arrange(STATEFP)
states
source('~/Desktop/own_code2/code/00_parent.R')
