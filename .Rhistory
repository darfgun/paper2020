source('~/Google Drive/currentDocumants/Studium/Bachelor/6.Semester/Bachelorarbeit/Code/ba1.0.R')
source('~/Google Drive/currentDocumants/Studium/Bachelor/6.Semester/Bachelorarbeit/Code/ba1.0.R')
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
library(rstan)
example(stan_model,run.dontrun = TRUE)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
library(rstan)
example(stan_model,run.dontrun = TRUE)
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS += -O3 -mtune=native -arch x86_64 -ftemplate-depth-256",
file = M, sep = "\n", append = FALSE)
source('~/Google Drive/currentDocumants/mixed Data/2020/2020job/HIGH/Progress/data/R code/code1.R')
Sys.setenv(MAKEFLAGS = "-j4") # four cores used
install.packages("rstan", type = "source")
library(rstan)
example(stan_model,run.dontrun = TRUE)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
#test
library(rstan)
example(stan_model,run.dontrun = TRUE)
remotes::install_github("stan-dev/rstan", ref = "develop",
subdir = "rstan/rstan", build_opts = "")
remotes::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan", build_opts = "")
#remotes::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan", build_opts = "")
#test
library(Rcpp)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS += -O3 -mtune=native -arch x86_64 -ftemplate-depth-256",
file = M, sep = "\n", append = FALSE)
#Sys.setenv(MAKEFLAGS = "-j4") # four cores used
install.packages("rstan", type = "source")
#remotes::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan", build_opts = "")
#test
library(rstan)
#Sys.setenv(MAKEFLAGS = "-j4") # four cores used
#install.packages("rstan", type = "source")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
#remotes::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan", build_opts = "")
#test
library(rstan)
example(stan_model,run.dontrun = TRUE)
#remotes::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan", build_opts = "")
#test
library(rstan)
#Sys.setenv(MAKEFLAGS = "-j4") # four cores used
install.packages("loo", type = "source")
#remotes::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan", build_opts = "")
#test
library(rstan)
#remotes::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan", build_opts = "")
#test
library(loo)
#Sys.setenv(MAKEFLAGS = "-j4") # four cores used
install.packages("loo", type = "source")
example(stan_model,run.dontrun = TRUE)
library(rstan)
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
n
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
#remotes::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan", build_opts = "")
#test
library(Rcpp)
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS += -O3 -mtune=native -arch x86_64 -ftemplate-depth-256",
file = M, sep = "\n", append = FALSE)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
library(rstan)
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
library(sf)
?st_point
?st_sfc
?st_transform
Sys.info()["sysname"]
Sys.info()
source('~/Desktop/own_code2/code/00_parent.R')
# load packages, install if missing #TODO here?
packages <- c("RCurl","magrittr", "tigris", "censusapi")
for(p in packages){
if(p %in% rownames(installed.packages())==FALSE){
install.packages(p)
}
suppressWarnings(library(p, character.only = T, warn.conflicts=FALSE))
}
options(tigris_use_cache = FALSE)
#download rhdf5
if("rhdf5" %in% rownames(installed.packages())==FALSE){
if (!requireNamespace("BiocManager", quietly = TRUE)){
install.packages("BiocManager")
}
BiocManager::install("rhdf5")
}
suppressWarnings(library(rhdf5))
#----------------------download exposure data-----------------
filenameExp<-paste(toString(year),".h5", sep = "")
filepathExp <- file.path(expDir, filenameExp)
if (!file.exists(filepathExp)){
url<-"ftp://stetson.phys.dal.ca/jmeng/HEI2018-HistoricalPM25/historicalPM25/"
print(paste("Downloading PM exposure data for",year))
download.file(paste(url, filenameExp, sep = ""), filepathExp)
print(paste("Successfully downloaded PM exposure data for",year))
}
#save useful variable for estimations later on
filenameM <-paste("m_exp_",toString(year),".RData", sep = "")
filepathM <- file.path(tmpDir, filenameM)
if (!file.exists(filepathM)){
exp_data <- H5Fopen(filepathExp)
long_vec <-  c(as.matrix(exp_data$longitude)) #TODO optimize?
lat_vec <- c(as.matrix(exp_data$latitude))
n_long<-length(long_vec)-1
long_dif<-long_vec[2:(1+n_long)]-long_vec[1:n_long]
m_min_long<-min(long_dif)
m_max_long<-max(long_dif)
n_lat<-length(lat_vec)-1
lat_dif<-lat_vec[2:(1+n_lat)]-lat_vec[1:n_lat]
m_min_lat<-min(lat_dif)
m_max_lat<-max(lat_dif)
save(m_min_long, m_max_long, m_min_lat, m_max_lat, file = filepathM)
}
rm(filenameExp, filepathExp) #TODO
rm(filenameM, filepathM)
###------------------download tract shape files--------------------
#only for for Chicago for test purposes
filenameTr<-paste("tracts_",toString(year),".rds", sep = "")
filepathTr <- file.path(tracDir, filenameTr)
if (!file.exists(filepathTr)){
chi_counties <- c("Cook", "DeKalb", "DuPage", "Grundy", "Lake",
"Kane", "Kendall", "McHenry", "Will County")
print(paste("Downloading tracts for",year))
tracts <- tracts(state = "IL", county = chi_counties, cb = TRUE, year=year)
print(paste("Successfully downloaded tracts for",year))
saveRDS(tracts, filepathTr) #TODO other format?
}
chi_counties <- c("Cook", "DeKalb", "DuPage", "Grundy", "Lake",
"Kane", "Kendall", "McHenry", "Will County")
print(paste("Downloading tracts for",year))
tracts <- tracts(state = "IL", county = chi_counties, cb = TRUE, year=year)
st_drivers()
tracts <- tracts(state = "IL", county = chi_counties, cb = TRUE, year=year)
tracts <- tracts(state = "IL", county = chi_counties, cb = TRUE, year=2010) #TODO error for 2011
tracts <- tracts(state = "IL", county = chi_counties, cb = TRUE, year=2011) #TODO error for 2011
tracts <- tracts(state = "IL", county = chi_counties, cb = TRUE, year=2011) #TODO error for 2011
tracts <- tracts(state = "IL", county = chi_counties, cb = TRUE, year=2009) #TODO error for 2011
tracts <- tracts(state = "IL", county = chi_counties, cb = TRUE, year=2000)
tracts <- tracts(state = "IL", county = chi_counties, cb = TRUE, year=2001)
point<-st_point(x = coord, sparse=FALSE)
packages <- c("magrittr", "tigris", "sf", "tidyverse", "data.table")#, "tmap"
for(p in packages){
if(p %in% rownames(installed.packages())==FALSE){
install.packages(p)
}
suppressWarnings(library(p, character.only = T, warn.conflicts=FALSE))
}
options(tigris_use_cache = FALSE)
#download rhdf5
if("rhdf5" %in% rownames(installed.packages())==FALSE){
if (!requireNamespace("BiocManager", quietly = TRUE)){
install.packages("BiocManager")
}
BiocManager::install("rhdf5")
}
suppressWarnings(library(rhdf5))
year <- 2010 #TODO delete
dataDir <- "/Users/default/Desktop/own_code2/data"
tmpDir <- "/Users/default/Desktop/own_code2/data/tmp"
expDir <- "/Users/default/Desktop/own_code2/data/01_exposure"
tracDir <- "/Users/default/Desktop/own_code2/data/02_tracts"
exp_tracDir <- "/Users/default/Desktop/own_code2/data/03_exp_tracts"
##-----code-----
#load data
filenameExp<-paste(toString(year),".h5", sep = "")
filepathExp <- file.path(expDir, filenameExp)
hdf_file <- H5Fopen(filepathExp)
exp_data <- as.matrix(hdf_file$CorrectedPM2.5)
long_vec <-  c(as.matrix(hdf_file$longitude))
lat_vec <- c(as.matrix(hdf_file$latitude))
filenameM <-paste("m_exp_",toString(year),".RData", sep = "")
filepathM <- file.path(tmpDir, filenameM)
load(filepathM)
filenameTr<-paste("tracts_",toString(year),".rds", sep = "")
filepathTr <- file.path(tracDir, filenameTr)
tracts<-readRDS(filepathTr)
result <- data.frame()      #Doubles=double()
i<-1 #TODO l?schen
row <- tracts[i,]
#get enclosing box, make sure in range of exposure data
bbox <- st_bbox(row)
long_min <- bbox$xmin %>%
max(.,long_vec[1])
lat_min <- bbox$ymin %>%
max(.,lat_vec[1])
long_max <- bbox$xmax %>%
min(.,long_vec[length(long_vec)])
lat_max <- bbox$ymax %>%
min(.,lat_vec[length(lat_vec)])
long_row_min <- -1+((long_min-long_vec[1])/m_max_long) %>%
floor
lat_row_min <- -1+((lat_min-lat_vec[1])/m_max_lat) %>%
floor
long_row_max<-1+((long_max-long_vec[1])/m_min_long) %>%
ceiling
lat_row_max<-1+((lat_max-lat_vec[1])/m_min_lat) %>%
ceiling
long_subset<-long_vec[long_row_min:long_row_max]
lat_subset <- lat_vec[lat_row_min:lat_row_max]
select <- matrix(ncol = 2, byrow = TRUE)
for(k in seq_along(long_subset)){
for(j in seq_along(lat_subset)){
coord <- c(long_subset[k], lat_subset[j])
point<-st_point(x = coord)
if(st_within(point, row, sparse=FALSE)){ #TODO richtige Reihenfolge?
c <- c(k,j)
rbind(select,c) #TODO optimize?
}
}
}
select
select <- matrix(ncol = 2, byrow = TRUE)
select
i<-50 #TODO l?schen
row <- tracts[i,]
#get enclosing box, make sure in range of exposure data
bbox <- st_bbox(row)
long_min <- bbox$xmin %>%
max(.,long_vec[1])
lat_min <- bbox$ymin %>%
max(.,lat_vec[1])
long_max <- bbox$xmax %>%
min(.,long_vec[length(long_vec)])
lat_max <- bbox$ymax %>%
min(.,lat_vec[length(lat_vec)])
long_row_min <- -1+((long_min-long_vec[1])/m_max_long) %>%
floor
lat_row_min <- -1+((lat_min-lat_vec[1])/m_max_lat) %>%
floor
long_row_max<-1+((long_max-long_vec[1])/m_min_long) %>%
ceiling
lat_row_max<-1+((lat_max-lat_vec[1])/m_min_lat) %>%
ceiling
long_subset<-long_vec[long_row_min:long_row_max]
lat_subset <- lat_vec[lat_row_min:lat_row_max]
select <- matrix(ncol = 2, byrow = TRUE)
for(k in seq_along(long_subset)){
for(j in seq_along(lat_subset)){
coord <- c(long_subset[k], lat_subset[j])
point<-st_point(x = coord)
if(st_within(point, row, sparse=FALSE)){ #TODO richtige Reihenfolge?
c <- c(k,j)
rbind(select,c) #TODO optimize?
}
}
}
select
for(k in seq_along(long_subset)){
for(j in seq_along(lat_subset)){
coord <- c(long_subset[k], lat_subset[j])
point<-st_point(x = coord)
if(st_within(row,point, sparse=FALSE)){ #TODO richtige Reihenfolge?
c <- c(k,j)
rbind(select,c) #TODO optimize?
}
}
}
for(k in seq_along(long_subset)){
for(j in seq_along(lat_subset)){
coord <- c(long_subset[k], lat_subset[j])
point<-st_point(x = coord)
if(st_within(point, row, sparse=FALSE)){ #TODO richtige Reihenfolge?
c <- c(k,j)
rbind(select,c) #TODO optimize?
}
}
}
select <- matrix(ncol = 2, byrow = TRUE)
for(k in seq_along(long_subset)){
for(j in seq_along(lat_subset)){
coord <- c(long_subset[k], lat_subset[j])
point<-st_point(x = coord)
if(st_intersects(point, row, sparse=FALSE)){ #TODO richtige Reihenfolge?, st_intersects
c <- c(k,j)
rbind(select,c) #TODO optimize?
}
}
}
select
select <- matrix(ncol = 2, byrow = TRUE)
for(k in seq_along(long_subset)){
for(j in seq_along(lat_subset)){
coord <- c(long_subset[k], lat_subset[j])
point<-st_point(x = coord)
if(st_intersects(row, point, sparse=FALSE)){ #TODO richtige Reihenfolge?, st_intersects
c <- c(k,j)
rbind(select,c) #TODO optimize?
}
}
}
select
#bbox #TODO delete
#c( min(long_subset),  min(lat_subset),max(long_subset) ,max(lat_subset))
#asdfs<-c( (bbox$xmin >=min(long_subset)),  bbox$ymin >=min(lat_subset),bbox$xmax<= max(long_subset) ,bbox$ymax<=max(lat_subset))
#print(asdfs)
plot(tract)
#bbox #TODO delete
#c( min(long_subset),  min(lat_subset),max(long_subset) ,max(lat_subset))
#asdfs<-c( (bbox$xmin >=min(long_subset)),  bbox$ymin >=min(lat_subset),bbox$xmax<= max(long_subset) ,bbox$ymax<=max(lat_subset))
#print(asdfs)
plot(row)
gg <- ggplot()
gg <- gg + geom_sf(data = tracts, color="black",
fill="white", size=0.25)
gg
gg <- ggplot()
gg <- gg + geom_sf(data = row, color="black",
fill="white", size=0.25)
gg
select <- matrix(ncol = 2, byrow = TRUE)
for(k in seq_along(long_subset)){
for(j in seq_along(lat_subset)){
coord <- c(long_subset[k], lat_subset[j])
point<-st_point(x = coord)
if(st_within(point, row, sparse=FALSE)){ #TODO richtige Reihenfolge?,
c <- c(k,j)
rbind(select,c) #TODO optimize?
}
}
}
gg
for(k in seq_along(long_subset)){
for(j in seq_along(lat_subset)){
coord <- c(long_subset[k], lat_subset[j])
point<-st_point(x = coord)
gg <- gg + geom_sf(data = point, color="black",
fill="red", size=0.25)
if(st_within(point, row, sparse=FALSE)){ #TODO richtige Reihenfolge?,
c <- c(k,j)
rbind(select,c) #TODO optimize?
}
}
}
gg
for(k in seq_along(long_subset)){
for(j in seq_along(lat_subset)){
coord <- c(long_subset[k], lat_subset[j])
point<-st_point(x = coord)
gg <- gg + geom_point(data = coord, size = 4,
shape = 23, fill = "darkred") +
if(st_within(point, row, sparse=FALSE)){ #TODO richtige Reihenfolge?,
c <- c(k,j)
rbind(select,c) #TODO optimize?
}
}
}
#bbox #TODO delete
#c( min(long_subset),  min(lat_subset),max(long_subset) ,max(lat_subset))
#asdfs<-c( (bbox$xmin >=min(long_subset)),  bbox$ymin >=min(lat_subset),bbox$xmax<= max(long_subset) ,bbox$ymax<=max(lat_subset))
#print(asdfs)
gg <- ggplot()
gg <- gg + geom_sf(data = row, color="black",
fill="white", size=0.25)
select <- matrix(ncol = 2, byrow = TRUE)
for(k in seq_along(long_subset)){
for(j in seq_along(lat_subset)){
coord <- c(long_subset[k], lat_subset[j])
point<-st_point(x = coord)
gg <- gg + geom_point(data = point, aes(x = longitude, y = latitude), size = 4,
shape = 23, fill = "darkred") +
if(st_within(point, row, sparse=FALSE)){ #TODO richtige Reihenfolge?,
c <- c(k,j)
rbind(select,c) #TODO optimize?
}
}
}
#bbox #TODO delete
#c( min(long_subset),  min(lat_subset),max(long_subset) ,max(lat_subset))
#asdfs<-c( (bbox$xmin >=min(long_subset)),  bbox$ymin >=min(lat_subset),bbox$xmax<= max(long_subset) ,bbox$ymax<=max(lat_subset))
#print(asdfs)
gg <- ggplot()
gg <- gg + geom_sf(data = row, color="black",
fill="white", size=0.25)
select <- matrix(ncol = 2, byrow = TRUE)
for(k in seq_along(long_subset)){
for(j in seq_along(lat_subset)){
coord <- c(long_subset[k], lat_subset[j])
point<-st_point(x = coord)
gg <- gg + geom_point(data = point, aes(x = longitude, y = latitude), size = 4,
shape = 23, fill = "darkred")
#if(st_within(point, row, sparse=FALSE)){ #TODO richtige Reihenfolge?,
#  c <- c(k,j)
#  rbind(select,c) #TODO optimize?
#}
}
}
gg
gg <- gg + geom_sf(data = row, color="black",
fill="white", size=0.25)
select <- matrix(ncol = 2, byrow = TRUE)
for(k in seq_along(long_subset)){
for(j in seq_along(lat_subset)){
coord <- c(long_subset[k], lat_subset[j])
point<-st_point(x = coord)
(sites <- data.frame(longitude = long_subset[k], latitude = lat_subset[j]))
(sites <- st_as_sf(sites, coords = c("longitude", "latitude"),
crs = 4326, agr = "constant"))
gg <- gg + geom_sf(data = sites, size = 4, shape = 23, fill = "darkred")
#if(st_within(point, row, sparse=FALSE)){ #TODO richtige Reihenfolge?,
#  c <- c(k,j)
#  rbind(select,c) #TODO optimize?
#}
}
}
gg
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel",
"ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel", "ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
library("ggplot2")
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
world <- ne_countries(scale = "medium", returnclass = "sf")
(sites <- data.frame(longitude = c(-80.144005, -80.109), latitude = c(26.479005,
26.83)))
ggplot(data = world) +
geom_sf() +
geom_point(data = sites, aes(x = longitude, y = latitude), size = 4,
shape = 23, fill = "darkred") +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE)
library("rgeos")
library("rnaturalearth")
library("rnaturalearthdata")
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
(sites <- data.frame(longitude = c(-80.144005, -80.109), latitude = c(26.479005,
26.83)))
ggplot(data = world) +
geom_sf() +
geom_point(data = sites, aes(x = longitude, y = latitude), size = 4,
shape = 23, fill = "darkred") +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE)
(sites <- data.frame(longitude = c(-80.144005, -80.109), latitude = c(26.479005,
26.83)))
(sites <- st_as_sf(sites, coords = c("longitude", "latitude"),
crs = 4326, agr = "constant"))
ggplot(data = world) +
geom_sf() +
geom_sf(data = sites, size = 4, shape = 23, fill = "darkred") +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE)
gg <-ggplot() +
geom_sf() +
geom_sf(data = sites, size = 4, shape = 23, fill = "darkred") +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE)
gg
gg <-ggplot() +
geom_sf(data = world) +
geom_sf(data = sites, size = 4, shape = 23, fill = "darkred") +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE)
gg
gg <-ggplot()
gg<- gg+
geom_sf(data = world) +
geom_sf(data = sites, size = 4, shape = 23, fill = "darkred") +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE)
gg
gg <-ggplot()
gg<- gg+
geom_sf(data = world) +
#geom_sf(data = sites, size = 4, shape = 23, fill = "darkred") +
#coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE)
gg
gg <-ggplot()
gg<- gg+
geom_sf(data = world)
gg
gg <-ggplot()
gg<- gg+
geom_sf(data = row)
gg
gg <-ggplot()
gg<- gg+
geom_sf(data = row) +
geom_sf(data = sites, size = 4, shape = 23, fill = "darkred") +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE)
gg
gg <-ggplot()
gg<- gg+
geom_sf(data = row) +
geom_sf(data = sites, size = 4, shape = 23, fill = "darkred") #+
gg
