subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- sapply(subset, 1, FUN = function(long_ind, lat_ind){
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- sapply(subset, 1, FUN = function(long_ind, lat_ind){
print(c(long_ind,lat_ind))
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- sapply(subset, 1, FUN = function(long_ind, lat_ind){
print(c("long",long_ind,"lat",lat_ind))
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
subset
#print(c("long",long_ind,"lat",lat_ind))
long <- long_subset[long_ind]
long
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
long
lat
pm
df = data.frame(
a = c(1, 2, 3),
b = c(4, 5, 6),
c = c(7, 8, 9)
)
process_row = function(row) {
row = row[1,]
new_col_name = paste("[", paste(colnames(row), collapse = "+"), "]", sep = "")
row[[new_col_name]] = sum(row[1,])
return (row)
}
# For Loop
df_list <- vector(mode = "list", length = nrow(df))
for (r_num in 1:nrow(df)) {
df_list[[r_num]] <- process_row(df[r_num, ])
}
df_out_loop <- do.call(rbind, df_list)
# lapply
df_list <- lapply(1:nrow(df), function(r_num) { process_row(df[r_num, ]) })
df_out_lapply <- do.call(rbind, df_list)
# purrr::map_dfr
library(purrr)
df_out_map <- map_dfr(
1:nrow(df),
~ process_row(df[.x, ])
)
df_out_loop
df_out_lapply
df_out_map
?map_dfr
class(df_out_lapply)
# lapply
df_out_lapply <- lapply(1:nrow(df), function(r_num) { process_row(df[r_num, ]) }) %>%
do.call(rbind, .)
df_out_lapply
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
class(long_ind)
long_ind[1]
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- sapply(subset, 1, FUN = function(long_ind, lat_ind){
#print(c("long",long_ind,"lat",lat_ind))
long <- long_subset[long_ind[1]]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
subset2<-as.data.frame(subset2)
subset2
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
return(c(long,lat,pm))
#print(c("long",long_ind,"lat",lat_ind))
long <- long_subset[long_ind[1]]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
pm <- pm_subset[long_ind,lat_ind[1]]
pm <- pm_subset[long_ind,lat_ind[1]]
pm <- pm_subset[long_ind[1],lat_ind]
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- sapply(subset, 1, FUN = function(long_ind, lat_ind){
#print(c("long",long_ind,"lat",lat_ind))
long <- long_subset[long_ind[1]]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind[1],lat_ind]
return(c(long,lat,pm))
})
subset2<-as.data.frame(subset2)
subset2
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
subset
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- apply(subset, 1, FUN = function(long_ind, lat_ind){
#print(c("long",long_ind,"lat",lat_ind))
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
subset2<-as.data.frame(subset2)
subset2
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
long_subset<-long_vec[long_row_min:long_row_max]
long_subset
lat_subset
pm_subset
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
subset
5+7
source('~/Desktop/own_code2/code/02_ass_trac.R')
x<-4
y<- 3
long<- long_subset[1:x] # Koordinaten Longtitude
lat<-lat_subset[1:y] #Koordinaten Lattitude
pm<- pm_subset[1:x,1:y] # Feinstaub belastung von korrespondierenden Koordinaten
ziel <- data.frame(lat = lat_subset, long = rep(long_subset[1], length(x)), pm = pm_subset[1,])
long
long
lat
pm
ziel
#Ansatz
subset <- expand.grid(longX = seq_along(long), latY = seq_along(lat)) %>% #karthesisches Produkt
mutate(pm = pm[longX,latY] ,longX = long[longX], latY = lat[latY])
#Aber: Ausgabe:
subset
# GitHub packages
library(devtools)
library(tigris)
plot(combined)
library(censusapi)
library(tidyverse)
library(tmap)
chi_counties <- c("Cook", "DeKalb", "DuPage", "Grundy", "Lake",
"Kane", "Kendall", "McHenry", "Will County")
chi_tracts <- tracts(state = "IL", county = chi_counties, cb = TRUE)
key <- "d44ca9c0b07372ada0b5243518e89adcc06651ef"
data_from_api <- getCensus(name = "acs/acs5", vintage = 2015,
vars = c("B25077_001E"),
key = key,
region = "tract:*", regionin = "state:17")
?transmute
values <- data_from_api %>%
transmute(GEOID = paste0(state, county, tract),
value = B25077_001E)
chi_joined = geo_join(chi_tracts, values, by = "GEOID")
tm_shape(chi_joined, projection = 26916) +
tm_fill("value", style = "quantile", n = 7, palette = "Greens",
title = "Median home values \nin the Chicago Area") +
tm_legend(bg.color = "white", bg.alpha = 0.6) +
tm_style_gray()
tm_shape(chi_joined, projection = 26916) +
tm_fill("value", style = "quantile", n = 7, palette = "Greens",
title = "Median home values \nin the Chicago Area") +
tm_legend(bg.color = "white", bg.alpha = 0.6) #+
ttm()
tm_shape(chi_joined, projection = 26916) +
tm_fill("value", style = "quantile", n = 7, palette = "Greens",
title = "Median home values \nin the Chicago Area")
tracts
tracts
source('~/Desktop/own_code2/code/02_ass_trac.R')
tracts
tracts <- subset(tracts, select = -c("Geometry"))
tracts <- subset(tracts, select = -"Geometry")
within(tracts, rm('Geometry'))
tracts <- subset(tracts, select = -"geometry")
within(tracts, rm('geometry'))
tracts <-as.data.frame(tracts)
tracts
tracts <- subset(tracts, select = -"geometry")
within(tracts, rm('geometry'))
source('~/Desktop/own_code2/code/02_ass_trac.R')
tracts
##-----save as csv--------
tracts <-tracts %>%
as.data.frame %>%
within(., rm('geometry', 'LSAD', 'CENSUSAREA'))
source('~/Desktop/own_code2/code/02_ass_trac.R')
?round
?mult
?prod
cuts <- c(0, seq.int(from = 25, to=95, by=5), 150)
cuts
source('~/Desktop/own_code2/code/03_mrbrt_rr.R')
source('~/Desktop/own_code2/code/03_mrbrt_rr.R')
source('~/Desktop/own_code2/code/03_mrbrt_rr.R')
source('~/Desktop/own_code2/code/03_mrbrt_rr.R')
source('~/Desktop/own_code2/code/03_mrbrt_rr.R')
source('~/Desktop/own_code2/code/03_mrbrt_rr.R')
#clear memory
rm(list=ls(all=TRUE))
# load packages, install if missing
packages <- c("dplyr", "RCurl","magrittr", "tigris", "censusapi")#,"tictoc"
options(tigris_use_cache = FALSE)
for(p in packages){
if(p %in% rownames(installed.packages())==FALSE){
install.packages(p)
}
suppressMessages(library(p, character.only = T, warn.conflicts=FALSE))
}
data_from_api <- getCensus(name = "acs/acsse", vintage = year,
vars = "K200104",
region = "tract:*",
regionin = "state:17")
# Add key to .Renviron
key <- "d44ca9c0b07372ada0b5243518e89adcc06651ef" #TODO
Sys.setenv(CENSUS_KEY=key)
data_from_api <- getCensus(name = "acs/acsse", vintage = year,
vars = "K200104",
region = "tract:*",
regionin = "state:17")
data_from_api <- getCensus(name = "acs/acsse",
vintage = 2016, #TODO year
vars = "K200104",
region = "tract:*",
regionin = "state:17")
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
listCensusMetadata(
name = "acs/acsse",
type = "geography")
#https://api.census.gov/data/2010/dec/sf1/variables.html
year <-2010 #TODO delete
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables",
group = "P5") %>%
head
View(census_vars)
data_from_api <- getCensus(name = "dec/sf1",
vintage = year,
vars = "P005001",
region = "tract:*",
regionin = "state:17") #TODO testzwecke
View(data_from_api)
data_from_api <- getCensus(name = "dec/sf1",
vintage = year,
vars  = "group(P2)",
region = "tract:*",
regionin = "state:17") #TODO testzwecke
View(data_from_api)
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables",
group = "P1") %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables",
group = "P2") %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables",
group = "P3") %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables",
group = "P4") %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables",
group = "P5") %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables",
group = "P6") %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables",
group = "P7") %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables",
group = "P") %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables" #,
#group = "P7"
) %>%
head
View(census_vars)
#https://www.census.gov/data/developers/data-sets/ACS-supplemental-data.html
data_from_api <- getCensus(name = "acs/acsse",
vintage = year, #TODO year
vars = "K200104",
region = "combined statistical area", #TODO https://api.census.gov/data/2019/acs/acsse/examples.html
regionin = "state:17")
#https://www.census.gov/data/developers/data-sets/ACS-supplemental-data.html
data_from_api <- getCensus(name = "acs/acsse",
vintage = year, #TODO year
vars = "K200104",
region = "place", #TODO https://api.census.gov/data/2019/acs/acsse/examples.html
regionin = "state:17")
#https://www.census.gov/data/developers/data-sets/ACS-supplemental-data.html
data_from_api <- getCensus(name = "acs/acsse",
vintage = year, #TODO year
vars = "K200104",
region = "place*", #TODO https://api.census.gov/data/2019/acs/acsse/examples.html
regionin = "state:17")
#https://www.census.gov/data/developers/data-sets/ACS-supplemental-data.html
data_from_api <- getCensus(name = "acs/acsse",
vintage = year, #TODO year
vars = "K200104",
region = "K200101_001E*", #TODO https://api.census.gov/data/2019/acs/acsse/examples.html
regionin = "state:17")
#https://www.census.gov/data/developers/data-sets/ACS-supplemental-data.html
data_from_api <- getCensus(name = "acs/acsse",
vintage = year, #TODO year
vars = "K200104",
region = "county subdivision", #TODO https://api.census.gov/data/2019/acs/acsse/examples.html
regionin = "state:17")
?getCensus
data_from_api <- getCensus(name = "acs/acsse",
vintage = year, #TODO year
vars = "K200104",
region = "county subdivision", #TODO https://api.census.gov/data/2019/acs/acsse/examples.html
regionin = "state:17")
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables" ,
group = "P5"
) %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables" ,
group = "P1":"P5"
) %>%
head
group <- sapply(1:7, paste0("P",.))
group <- sapply(1:7, paste0("P"))
group <- sapply(1:7, function(x) paste0("P",.))
group <- sapply(1:7, function(x) paste0("P",as.string(.)))
group <- sapply(1:7, function(x) paste0("P",toString(.)))
group <- sapply(1:7, function(x) paste0("P",toString(.)))
r
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables" ,
group = c("P1","P2","P3","P4")
) %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables" ,
group = "P4"
) %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables" ,
group = "P1"
) %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables" ,
group = "P2"
) %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables" ,
group = "P3"
) %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables" ,
group = "P4"
) %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables" ,
group = "P5"
) %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables" ,
group = "P6"
) %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables" ,
group = "P7"
) %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables" ,
group = "P8"
) %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables" ,
group = "P9"
) %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables" ,
group = "P10"
) %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables" ,
group = "P9"
) %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables" ,
group = "P9"
) %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables" ,
group = "P10"
) %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables" ,
group = "P11"
) %>%
head
census_vars <- listCensusMetadata(
name = "dec/sf1",
vintage = 2010,
type = "variables" ,
group = "P12"
) %>%
head
