install.packages("pkgbuild")
install.packages("pkgbuild")
rt_path = pkgbuild::rtools_path()
rt_bin = paste0(substr(rt_path,1,nchar(rt_path)-4),"/mingw_$(WIN)/bin/")
writeLines(paste0('PATH="',rt_path,';${PATH}"'), con = "~/.Renviron")
writeLines(paste0('Sys.setenv(BINPREF = "',rt_bin,'")'), con = "~/.Rprofile")
install.packages("jsonlite",type="source")
Sys.getenv("BINPREF")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type = "source")
load(jsonlite)
load("jsonlite")
library("jsonlite")
library("jsonlite")
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(MAKEFLAGS = "-j4") # four cores used
install.packages("rstan", type = "source")
install.packages("readxl")
#test
library("readxl")
my_data <- read_excel("sterbetafel.xls")
my_data <- read_excel("sterbetafel.xlsx")
#test
my_data <- read.table(file = "clipboard",
sep = "\t", header=TRUE)
View(my_data)
#Überleben 20 jähriger für 40 Jahre
q_x<-my_data[1,1:2]
q_x
View(my_data)
#test
my_data <- read.table(file = "clipboard",
sep = "\t", header=TRUE)
#Überleben 20 jähriger für 40 Jahre
q_x<-my_data[1,1:2]
q_x
#Überleben 20 jähriger für 40 Jahre
q_x<-my_data[1:2,1]
q_x
p_x_subset<-1-q_x_subset
#Überleben 20 jähriger für 40 Jahre
q_x_subset<-my_data[20:60,2]
p_x_subset<-1-q_x_subset
p_x <- prod(p_x_subset)
#Unterschiede Geschlechter
plot(x=my_data[,1], y =my_data[,2])
my_data[,1]<- 1:121
View(my_data)
my_data[,1]<- 1:121
View(my_data)
my_data<-head(my_data,-1)
View(my_data)
my_data[1:122,1]<- 0:121
#Unterschiede Geschlechter
plot(x=my_data[,1], y =my_data[,2])
#Unterschiede Geschlechter
plot(x=my_data[1:40,1], y =my_data[1:40,2])
View(my_data)
#Unterschiede Geschlechter
plot(x=my_data[1:10,1], y =my_data[1:10,2])
#Überleben 20 jähriger für 40 Jahre
x<-20
n <-40
q_x_subset<-my_data[x:x+n-1,2]
p_x_subset<-1-q_x_subset
p_x <- prod(p_x_subset)
p_x
#Mit welcher Wahrscheinlichkeit stirbt er im 20. bzw. im 21. Lebensjahr?
my_data[19,2]
my_data[20,2]
#Leistungszusage, welche einer 20-jährigen Frau
x<-20
n <-20
i_vec <-c(0.01,0.02,0.03)
#Leistungszusage, welche einer 20-jährigen Frau
x<-20
n <-20
i_vec <-c(0.01,0.02,0.03)
v_vec<-1/(1+i_vec)
q_x_subset<-my_data[x:x+n-1,3] #Sterbewahrscheinlichkeit ab 20
p_x_subset <-1-q_x_subset #Überlebenswahrscheinlichkeit ein Jahr
q_x_subset<-my_data[x:x+n-1,3] #Sterbewahrscheinlichkeit ab 20
library("readxl")
q_x_subset
q_x_subset<-my_data[x:(x+n-1),3] #Sterbewahrscheinlichkeit ab 20
q_x_subset<-my_data[x:(x+n-1),3] #Sterbewahrscheinlichkeit ab 20
p_x_subset <-1-q_x_subset #Überlebenswahrscheinlichkeit ein Jahr
q_x_subset
p_x_subset <-1-q_x_subset #Überlebenswahrscheinlichkeit ein Jahr
k_p_x<-apply(1:(n-1), function (k){
return(prod(p_x_subset[1:k]))
}) #Überlebenswahrscheinlichkeit k Jahre
k_p_x<-sapply(1:(n-1), function (k){
return(prod(p_x_subset[1:k]))
}) #Überlebenswahrscheinlichkeit k Jahre
k_p_x<-sapply(1:n, function (k){
return(prod(p_x_subset[1:k]))
}) #Überlebenswahrscheinlichkeit k Jahre
K0<- 100000
results <- sapply(v_vec, function(v){
summanden<-sapply(1:(n-1),function(k){
return(k_p_x[k-1]*q_x_subset[k-1]*v^k)
})
return(sum(summanden))
})
results <- sapply(v_vec, function(v){
summanden<-sapply(1:(n-1),function(k){
return(k_p_x[k-1]*q_x_subset[k-1]*v^k)
})
sum <- sum(summanden)
return(sum)
})
source('C:/Users/Daniel/Google Drive/currentDocumants/mixed Data/2020/2020job/HIGH/Progress/R code/ACS_API.R')
library(censusapi)
install.packages("censusapi")
library(censusapi)
# Add key to .Renviron
YOURKEYHERE<- "d44ca9c0b07372ada0b5243518e89adcc06651ef"
Sys.setenv(CENSUS_KEY=YOURKEYHERE)
# Reload .Renviron
readRenviron("~/.Renviron")
# Check to see that the expected key is output in your R console
Sys.getenv("CENSUS_KEY")
apis <- listCensusApis()
View(apis)
View(apis)
apis[row, ]
typeof(apis)
apis(row)
apis[row]
apis[row]
apis[[row]
apis[[row]]
name <- "acs/acs5/profile"
vintage <- "2018"
acs_vars <- listCensusMetadata(
name = name,
type = "variables")
head(acs_vars)
acs_vars <- listCensusMetadata(
name = name,
type = "variables")
?listCensusMetadata
acs_vars <- listCensusMetadata(
name = name,
vintage = vintage)
head(acs_vars)
typeof(acs_vars)
acs_vars <- listCensusMetadata(
name = name,
type = "geography",
vintage = vintage)
head(acs_vars)
# clear memory
rm(list = ls(all = TRUE))
# load packages, install if missing
packages <- c("dplyr", "magrittr", "data.table", "tidyverse", "tictoc")
for (p in packages) {
suppressMessages(library(p, character.only = T, warn.conflicts = FALSE))
}
# Pass in arguments
args <- commandArgs(trailingOnly = T)
year <- args[1]
tmpDir <- args[3]
exp_tracDir <- args[7]
censDir <- args[8]
cens_agrDir <- args[9]
agr_by <- args[10]
#TODO l?schen
year <- 2000
tmpDir <- "/Users/default/Desktop/own_code2/data/tmp"
exp_tracDir <- "/Users/default/Desktop/own_code2/data/03_exp_tracts"
censDir <- "/Users/default/Desktop/own_code2/data/06_demog"
cens_agrDir <- "/Users/default/Desktop/own_code2/data/07_dem.agr"
agr_by <- "county"
if (!agr_by %in% c("county", "Census_Region", "Census_division", "hhs_region_number", "state", "nation")) {
print(paste(agr_by, "is an invalid agr_by argument"))
quit()
}
cens_agrDirC <- cens_agrDir %>% file.path(., "county", year)
dir.create(cens_agrDirC, recursive = T, showWarnings = F)
cens_agrDir <- cens_agrDir %>% file.path(., agr_by, year)
dir.create(cens_agrDir, recursive = T, showWarnings = F)
# load states, so we can loop over them
states <- file.path(tmpDir, "states.csv") %>% read.csv
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
tmp.dir
source('C:/Users/Daniel/Desktop/paper2020/code/06_aggregate.R')
state <- states[1,] #TODO lÃ¶schen
STUSPS <- state[["STUSPS"]] # TODO Ã¼berall
name <- state[["NAME"]]
cens_agrDirCX <- paste0("cens_agr_", toString(year), "_", STUSPS, ".csv") %>%
file.path(cens_agrDirC, .)
trac_censData <- paste0("census_", toString(year), "_", STUSPS, ".csv") %>%
file.path(censDir, year, .) %>%
read.csv %>%
pivot_wider(
names_from = variable,
values_from = pop_size
)
View(trac_censData)
exp_tracData <- paste0("exp_trac_", toString(year), "_", STUSPS, ".csv") %>%
file.path(exp_tracDir, year, .) %>%
read.csv()
if(nrow(exp_tracData)!=nrow(trac_censData)) warning("exp_tracData and trac_censData should have same number of rows in 06_aggregate")
trac_cens_expData <- left_join(trac_censData,
exp_tracData,
by = "AFFGEOID"
)
View(exp_tracData)
View(states)
View(trac_censData)
trac_censData <- paste0("census_", toString(year), "_", STUSPS, ".csv") %>%
file.path(censDir, year, .) %>%
read.csv %>%
pivot_wider(
names_from = variable,
values_from = pop_size
) %>%
setnames("GEO_ID","AFFGEOID")
View(trac_censData)
trac_cens_expData <- left_join(trac_censData,
exp_tracData,
by = "AFFGEOID"
)
View(trac_cens_expData)
trac_cens_expData <- left_join(trac_censData,
exp_tracData,
by = "AFFGEOID"
)%>%
pivot_longer(
cols = !c("state", "county", "tract", "AFFGEOID", "pm"),
names_to = "variable",
values_to = "pop_size"
)
View(trac_censData)
View(trac_cens_expData)
View(exp_tracData)
trac_cens_expData <- left_join(trac_censData,
exp_tracData,
by = "AFFGEOID"
)
View(trac_cens_expData)
trac_cens_expData2 <- trac_cens_expData %>%  pivot_longer(
cols = !c("state", "county", "tract", "AFFGEOID", "pm"),
names_to = "variable",
values_to = "pop_size"
)
View(trac_cens_expData2)
trac_cens_expData2 <- trac_cens_expData %>%  pivot_longer(
cols = c("state", "county", "tract", "AFFGEOID", "pm"),
names_to = "variable",
values_to = "pop_size"
)
class(trac_cens_expData)
trac_cens_expData <- left_join(trac_censData,
exp_tracData,
by = "AFFGEOID"
) %>% as.data.frame
class(trac_cens_expData)
trac_cens_expData2 <- trac_cens_expData %>%  pivot_longer(
cols = !c("state", "county", "tract", "AFFGEOID", "pm"),
names_to = "variable",
values_to = "pop_size"
)
View(trac_cens_expData2)
long <- melt(setDT(trac_cens_expData),
id.vars = c("state", "county", "tract", "AFFGEOID", "pm")
, variable.name = "pop_size")
View(long)
?setDT
trac_cens_expData <- left_join(trac_censData,
exp_tracData,
by = "AFFGEOID"
) %>%
as.data.frame %>%
setDT %>%
melt(
id.vars = c("state", "county", "tract", "AFFGEOID", "pm"),
variable.name = "pop_size"
)
View(trac_cens_expData)
trac_cens_expData <- left_join(trac_censData,
exp_tracData,
by = "AFFGEOID"
) %>%
as.data.frame %>%
#setDT %>%
melt(
id.vars = c("state", "county", "tract", "AFFGEOID", "pm"),
variable.name = "pop_size"
)
trac_cens_expData <- left_join(trac_censData,
exp_tracData,
by = "AFFGEOID"
) %>%
#as.data.frame %>%
setDT %>%
melt(
id.vars = c("state", "county", "tract", "AFFGEOID", "pm"),
variable.name = "pop_size"
)
View(trac_cens_expData)
trac_cens_expData <- left_join(trac_censData,
exp_tracData,
by = "AFFGEOID"
) %>%
setDT %>%
melt(
id.vars = c("state", "county", "tract", "AFFGEOID", "pm"),
variable.name = "pop_size"
) %>%
group_by(state, county, variable, pm) %>%
summarise(pop_size = sum(pop_size))
trac_cens_expData <- left_join(trac_censData,
exp_tracData,
by = "AFFGEOID"
) %>%
setDT %>%
melt(
id.vars = c("state", "county", "tract", "AFFGEOID", "pm"),
variable.name = "variable"
) %>%
group_by(state, county, variable, pm) %>%
summarise(pop_size = sum(pop_size))
trac_cens_expData <- left_join(trac_censData,
exp_tracData,
by = "AFFGEOID"
) %>%
setDT %>%
melt(
id.vars = c("state", "county", "tract", "AFFGEOID", "pm"),
variable.name = "variable"
) %>%
group_by(state, county, variable, pm) %>%
summarise(pop_size = sum(value))
# add proportions
cens_agr <- cens_agr %>%
group_by(variable) %>%
summarise(totals = sum(pop_size)) %>%
inner_join(cens_agr) %>%
mutate(prop = pop_size / totals)
cens_agr <- left_join(trac_censData,
exp_tracData,
by = "AFFGEOID"
) %>%
setDT %>%
melt(
id.vars = c("state", "county", "tract", "AFFGEOID", "pm"),
variable.name = "variable"
) %>%
group_by(state, county, variable, pm) %>%
summarise(pop_size = sum(value))
# add proportions
cens_agr <- cens_agr %>%
group_by(variable) %>%
summarise(totals = sum(pop_size)) %>%
inner_join(cens_agr) %>%
mutate(prop = pop_size / totals)
View(cens_agr)
cens_agr <- left_join(trac_censData,
exp_tracData,
by = "AFFGEOID"
) %>%
setDT %>%
melt(
id.vars = c("state", "county", "tract", "AFFGEOID", "pm"),
variable.name = "variable"
) %>%
group_by(state, county, variable, pm) %>%
summarise(pop_size = sum(value))
View(cens_agr)
# add proportions
cens_agr <- cens_agr %>%
group_by(state, county, variable) %>%
summarise(totals = sum(pop_size)) %>%
inner_join(cens_agr) %>%
mutate(prop = pop_size / totals)
View(cens_agr)
#TODO test, delete
cens_agr2 <- cens_agr %>%
group_by(state, county, variable) %>%
summarise(sum_prop = sum(prop))
View(cens_agr)
View(cens_agr2)
install.packages("styler")
styler:::style_active_pkg()
styler:::style_active_file()
styler:::style_active_file()
source('C:/Users/Daniel/Desktop/paper2020/code/06_aggregate.R')
source('C:/Users/Daniel/Desktop/paper2020/code/06_aggregate.R')
source('C:/Users/Daniel/Desktop/paper2020/code/06_aggregate.R')
