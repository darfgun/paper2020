install.packages("pkgbuild")
install.packages("pkgbuild")
rt_path = pkgbuild::rtools_path()
rt_bin = paste0(substr(rt_path,1,nchar(rt_path)-4),"/mingw_$(WIN)/bin/")
writeLines(paste0('PATH="',rt_path,';${PATH}"'), con = "~/.Renviron")
writeLines(paste0('Sys.setenv(BINPREF = "',rt_bin,'")'), con = "~/.Rprofile")
install.packages("jsonlite",type="source")
Sys.getenv("BINPREF")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type = "source")
load(jsonlite)
load("jsonlite")
library("jsonlite")
library("jsonlite")
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(MAKEFLAGS = "-j4") # four cores used
install.packages("rstan", type = "source")
install.packages("readxl")
#test
library("readxl")
my_data <- read_excel("sterbetafel.xls")
my_data <- read_excel("sterbetafel.xlsx")
#test
my_data <- read.table(file = "clipboard",
sep = "\t", header=TRUE)
View(my_data)
#Überleben 20 jähriger für 40 Jahre
q_x<-my_data[1,1:2]
q_x
View(my_data)
#test
my_data <- read.table(file = "clipboard",
sep = "\t", header=TRUE)
#Überleben 20 jähriger für 40 Jahre
q_x<-my_data[1,1:2]
q_x
#Überleben 20 jähriger für 40 Jahre
q_x<-my_data[1:2,1]
q_x
p_x_subset<-1-q_x_subset
#Überleben 20 jähriger für 40 Jahre
q_x_subset<-my_data[20:60,2]
p_x_subset<-1-q_x_subset
p_x <- prod(p_x_subset)
#Unterschiede Geschlechter
plot(x=my_data[,1], y =my_data[,2])
my_data[,1]<- 1:121
View(my_data)
my_data[,1]<- 1:121
View(my_data)
my_data<-head(my_data,-1)
View(my_data)
my_data[1:122,1]<- 0:121
#Unterschiede Geschlechter
plot(x=my_data[,1], y =my_data[,2])
#Unterschiede Geschlechter
plot(x=my_data[1:40,1], y =my_data[1:40,2])
View(my_data)
#Unterschiede Geschlechter
plot(x=my_data[1:10,1], y =my_data[1:10,2])
#Überleben 20 jähriger für 40 Jahre
x<-20
n <-40
q_x_subset<-my_data[x:x+n-1,2]
p_x_subset<-1-q_x_subset
p_x <- prod(p_x_subset)
p_x
#Mit welcher Wahrscheinlichkeit stirbt er im 20. bzw. im 21. Lebensjahr?
my_data[19,2]
my_data[20,2]
#Leistungszusage, welche einer 20-jährigen Frau
x<-20
n <-20
i_vec <-c(0.01,0.02,0.03)
#Leistungszusage, welche einer 20-jährigen Frau
x<-20
n <-20
i_vec <-c(0.01,0.02,0.03)
v_vec<-1/(1+i_vec)
q_x_subset<-my_data[x:x+n-1,3] #Sterbewahrscheinlichkeit ab 20
p_x_subset <-1-q_x_subset #Überlebenswahrscheinlichkeit ein Jahr
q_x_subset<-my_data[x:x+n-1,3] #Sterbewahrscheinlichkeit ab 20
library("readxl")
q_x_subset
q_x_subset<-my_data[x:(x+n-1),3] #Sterbewahrscheinlichkeit ab 20
q_x_subset<-my_data[x:(x+n-1),3] #Sterbewahrscheinlichkeit ab 20
p_x_subset <-1-q_x_subset #Überlebenswahrscheinlichkeit ein Jahr
q_x_subset
p_x_subset <-1-q_x_subset #Überlebenswahrscheinlichkeit ein Jahr
k_p_x<-apply(1:(n-1), function (k){
return(prod(p_x_subset[1:k]))
}) #Überlebenswahrscheinlichkeit k Jahre
k_p_x<-sapply(1:(n-1), function (k){
return(prod(p_x_subset[1:k]))
}) #Überlebenswahrscheinlichkeit k Jahre
k_p_x<-sapply(1:n, function (k){
return(prod(p_x_subset[1:k]))
}) #Überlebenswahrscheinlichkeit k Jahre
K0<- 100000
results <- sapply(v_vec, function(v){
summanden<-sapply(1:(n-1),function(k){
return(k_p_x[k-1]*q_x_subset[k-1]*v^k)
})
return(sum(summanden))
})
results <- sapply(v_vec, function(v){
summanden<-sapply(1:(n-1),function(k){
return(k_p_x[k-1]*q_x_subset[k-1]*v^k)
})
sum <- sum(summanden)
return(sum)
})
source('C:/Users/Daniel/Google Drive/currentDocumants/mixed Data/2020/2020job/HIGH/Progress/R code/ACS_API.R')
library(censusapi)
install.packages("censusapi")
library(censusapi)
# Add key to .Renviron
YOURKEYHERE<- "d44ca9c0b07372ada0b5243518e89adcc06651ef"
Sys.setenv(CENSUS_KEY=YOURKEYHERE)
# Reload .Renviron
readRenviron("~/.Renviron")
# Check to see that the expected key is output in your R console
Sys.getenv("CENSUS_KEY")
apis <- listCensusApis()
View(apis)
View(apis)
apis[row, ]
typeof(apis)
apis(row)
apis[row]
apis[row]
apis[[row]
apis[[row]]
name <- "acs/acs5/profile"
vintage <- "2018"
acs_vars <- listCensusMetadata(
name = name,
type = "variables")
head(acs_vars)
acs_vars <- listCensusMetadata(
name = name,
type = "variables")
?listCensusMetadata
acs_vars <- listCensusMetadata(
name = name,
vintage = vintage)
head(acs_vars)
typeof(acs_vars)
acs_vars <- listCensusMetadata(
name = name,
type = "geography",
vintage = vintage)
head(acs_vars)
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
#----------------------download exposure data-----------------
year<-2016
expDir<-"C:/Users/Daniel/Desktop/paper2020/data/01_exposure"  #TODO löschen
filenameExp<-paste(toString(year),".h5", sep = "")
filepathExp <- file.path(expDir, filenameExp)
filepathExp
if (!file.exists(filepathExp)){
url<-"ftp://stetson.phys.dal.ca/jmeng/HEI2018-HistoricalPM25/historicalPM25/"
print(paste("Downloading PM exposure data for",year))
download.file(paste(url, filenameExp, sep = ""), filepathExp)
print(paste("Successfully downloaded PM exposure data for",year))
}
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
#clear memory
rm(list=ls(all=TRUE))
# load packages, install if missing #TODO here?
suppressWarnings(suppressMessages(library(RODBC)))
packages <- c("RCurl","magrittr", "tigris", "censusapi")
for(p in packages){
if(p %in% rownames(installed.packages())==FALSE){
install.packages(p)
}
library(p, character.only = T)
}
# load packages, install if missing #TODO here?
packages <- c("RCurl","magrittr", "tigris", "censusapi")
for(p in packages){
if(p %in% rownames(installed.packages())==FALSE){
install.packages(p)
}
suppressPackageStartupMessages(library(p))
library(p, character.only = T)
}
# load packages, install if missing #TODO here?
packages <- c("RCurl","magrittr", "tigris", "censusapi")
for(p in packages){
if(p %in% rownames(installed.packages())==FALSE){
install.packages(p)
}
library(p, character.only = T)
suppressPackageStartupMessages(library(p))
}
# load packages, install if missing #TODO here?
packages <- c("RCurl","magrittr", "tigris", "censusapi")
for(p in packages){
if(p %in% rownames(installed.packages())==FALSE){
install.packages(p)
}
library(p, character.only = T)
suppressPackageStartupMessages(library(p))
}
# load packages, install if missing #TODO here?
packages <- c("RCurl","magrittr", "tigris", "censusapi")
for(p in packages){
if(p %in% rownames(installed.packages())==FALSE){
install.packages(p)
}
library(p, character.only = T)
#suppressPackageStartupMessages(library(p))
}
options(tigris_use_cache = TRUE)
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
update.packages(ask=FALSE)
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
source('C:/Users/Daniel/Desktop/paper2020/code/00_parent.R')
#------------------SET-UP--------------------------------------------------
#clear memory
rm(list=ls(all=TRUE))
packages <- c("magrittr", "tigris")
for(p in packages){
if(p %in% rownames(installed.packages())==FALSE){
install.packages(p)
}
suppressWarnings(library(p, character.only = T))
}
options(tigris_use_cache = TRUE)
#download rhdf5
if("rhdf5" %in% rownames(installed.packages())==FALSE){
if (!requireNamespace("BiocManager", quietly = TRUE)){
install.packages("BiocManager")
}
BiocManager::install("rhdf5")
}
suppressWarnings(library(rhdf5))
year <- 2010
dataDir <- "C:/Users/Daniel/Desktop/paper2020/data"
tmpDir <- "C:/Users/Daniel/Desktop/paper2020/data/tmp"
expDir <- "C:/Users/Daniel/Desktop/paper2020/data/01_exposure"
tracDir <- "C:/Users/Daniel/Desktop/paper2020/data/02_tracts"
exp_tracDir <- "C:/Users/Daniel/Desktop/paper2020/data/03_exp_tracts"
##-----code-----
#load data
filenameExp<-paste(toString(year),".h5", sep = "")
filepathExp <- file.path(expDir, filenameExp)
exp_data <- H5Fopen(filepathExp)
filenameM <-paste("m_exp_",toString(year),".RData", sep = "")
filepathM <- file.path(tmpDir, filenameM)
load(filepathM)
filenameTr<-paste("tracts_",toString(year),".rds", sep = "")
filepathTr <- file.path(tracDir, filenameTr)
test<-readRDS(filepathTr)
View(test)
class(test)
#
plot(test)
# GitHub packages
library(devtools)
library(tigris)
options(tigris_use_cache = TRUE)
library(ggplot2)
me <- counties("Maine", cb = TRUE)
gg <- ggplot()
gg <- gg + geom_sf(data = me, color="black",
fill="white", size=0.25)
gg
tracts<-readRDS(filepathTr)
#
gg <- ggplot()
gg <- gg + geom_sf(data = tracts, color="black",
fill="white", size=0.25)
gg
library(censusapi)
library(tidyverse)
library(tmap)
chi_counties <- c("Cook", "DeKalb", "DuPage", "Grundy", "Lake",
"Kane", "Kendall", "McHenry", "Will County")
chi_tracts <- tracts(state = "IL", county = chi_counties, cb = TRUE)
key <- "d44ca9c0b07372ada0b5243518e89adcc06651ef"
data_from_api <- getCensus(name = "acs/acs5", vintage = 2015,
vars = c("B25077_001E"),
region = "tract:*", regionin = "state:17")
key <- "d44ca9c0b07372ada0b5243518e89adcc06651ef"
data_from_api <- getCensus(name = "acs/acs5", vintage = 2015,
vars = c("B25077_001E"),
key = key,
region = "tract:*", regionin = "state:17")
values <- data_from_api %>%
transmute(GEOID = paste0(state, county, tract),
value = B25077_001E)
?geom_sf
