install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
library(rstan)
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
library(sf)
?st_point
?st_sfc
?st_transform
Sys.info()["sysname"]
Sys.info()
library(plyr)
A <- c(1,2,3)
B <- factor(c('x','y'))
C <- c(0.1,0.5)
d = expand.grid(x = A, y = B, z = C)
View(d)
class(plyr)
class(d)
packages <- c("magrittr", "tigris", "sf", "tidyverse", "ggplot","plyr")#, "tmap"
for(p in packages){
if(p %in% rownames(installed.packages())==FALSE){
install.packages(p)
}
suppressWarnings(library(p, character.only = T, warn.conflicts=FALSE))
}
options(tigris_use_cache = FALSE)
#download rhdf5
if("rhdf5" %in% rownames(installed.packages())==FALSE){
if (!requireNamespace("BiocManager", quietly = TRUE)){
install.packages("BiocManager")
}
BiocManager::install("rhdf5")
}
suppressWarnings(library(rhdf5))
year <- 2010 #TODO delete
dataDir <- "/Users/default/Desktop/own_code2/data"
tmpDir <- "/Users/default/Desktop/own_code2/data/tmp"
expDir <- "/Users/default/Desktop/own_code2/data/01_exposure"
tracDir <- "/Users/default/Desktop/own_code2/data/02_tracts"
exp_tracDir <- "/Users/default/Desktop/own_code2/data/03_exp_tracts"
##-----code-----
#load data
filenameExp<-paste(toString(year),".h5", sep = "")
filepathExp <- file.path(expDir, filenameExp)
hdf_file <- H5Fopen(filepathExp)
exp_data <- as.matrix(hdf_file$CorrectedPM2.5)
long_vec <-  c(as.matrix(hdf_file$longitude))
lat_vec <- c(as.matrix(hdf_file$latitude))
filenameM <-paste("m_exp_",toString(year),".RData", sep = "")
filepathM <- file.path(tmpDir, filenameM)
load(filepathM)
filenameTr<-paste("tracts_",toString(year),".rds", sep = "")
filepathTr <- file.path(tracDir, filenameTr)
tracts<-readRDS(filepathTr)
result <- data.frame()      #Doubles=double()
for(i in seq_along(tracts)) { #
i<-50 #TODO l?schen
row <- tracts[i,]
#get enclosing box, make sure in range of exposure data
bbox <- st_bbox(row)
long_min <- bbox$xmin %>%
max(.,long_vec[1])
lat_min <- bbox$ymin %>%
max(.,lat_vec[1])
long_max <- bbox$xmax %>%
min(.,long_vec[length(long_vec)])
lat_max <- bbox$ymax %>%
min(.,lat_vec[length(lat_vec)])
long_row_min <- -1+((long_min-long_vec[1])/m_max_long) %>%
floor
lat_row_min <- -1+((lat_min-lat_vec[1])/m_max_lat) %>%
floor
long_row_max<-1+((long_max-long_vec[1])/m_min_long) %>%
ceiling
lat_row_max<-1+((lat_max-lat_vec[1])/m_min_lat) %>%
ceiling
long_subset<-long_vec[long_row_min:long_row_max]
lat_subset <- lat_vec[lat_row_min:lat_row_max]
pm_subset <- exp_data[long_row_min:long_row_max,lat_row_min:lat_row_max]
subset = expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
#subset['pm'] <- NA
subset <- apply(subset, 1, FUN = function(long_ind, lat_ind){
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
#TODO convert to spatial data frame
#bbox #TODO delete
#c( min(long_subset),  min(lat_subset),max(long_subset) ,max(lat_subset))
#asdfs<-c( (bbox$xmin >=min(long_subset)),  bbox$ymin >=min(lat_subset),bbox$xmax<= max(long_subset) ,bbox$ymax<=max(lat_subset))
#print(asdfs)
gg <- ggplot()
gg <- gg + geom_sf(data = row, color="black",
fill="white", size=0.25)
#https://stackoverflow.com/questions/4309217/cartesian-product-data-frame
select <- matrix(ncol = 2, byrow = TRUE)
for(k in seq_along(long_subset)){
for(j in seq_along(lat_subset)){
coord <- c(long_subset[k], lat_subset[j])
point<-st_point(x = coord)
(sites <- data.frame(longitude = long_subset[k], latitude = lat_subset[j]))
(sites <- st_as_sf(sites, coords = c("longitude", "latitude"),
crs = 4326, agr = "constant"))
gg <- gg + geom_sf(data = sites, size = 4, shape = 23, fill = "darkred")
#if(st_within(point, row, sparse=FALSE)){ #TODO richtige Reihenfolge?,
#  c <- c(k,j)
#  rbind(select,c) #TODO optimize?
#}
}
}
gg
if(nrow(select)>0){
pm <- exp_data[long_row_min:long_row_max,lat_row_min:lat_row_max][select]
#%>% mean
}else{
#TODO find closest, take that
}
#add_row(result, pm)
}
i<-50 #TODO l?schen
row <- tracts[i,]
#get enclosing box, make sure in range of exposure data
bbox <- st_bbox(row)
long_min <- bbox$xmin %>%
max(.,long_vec[1])
lat_min <- bbox$ymin %>%
max(.,lat_vec[1])
long_max <- bbox$xmax %>%
min(.,long_vec[length(long_vec)])
lat_max <- bbox$ymax %>%
min(.,lat_vec[length(lat_vec)])
long_row_min <- -1+((long_min-long_vec[1])/m_max_long) %>%
floor
lat_row_min <- -1+((lat_min-lat_vec[1])/m_max_lat) %>%
floor
long_row_max<-1+((long_max-long_vec[1])/m_min_long) %>%
ceiling
lat_row_max<-1+((lat_max-lat_vec[1])/m_min_lat) %>%
ceiling
long_subset<-long_vec[long_row_min:long_row_max]
lat_subset <- lat_vec[lat_row_min:lat_row_max]
pm_subset <- exp_data[long_row_min:long_row_max,lat_row_min:lat_row_max]
subset = expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
subset
#subset['pm'] <- NA
subset <- apply(subset, 1, FUN = function(long_ind, lat_ind){
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
subset
subset[1,]
subset[,1]
subset[1,1]
subset[1,2]
subset[2,1]
long_subset
lat_subset
pm_subset
subset
subset = expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
subset
#subset['pm'] <- NA
subset2 <- apply(subset, 1, FUN = function(long_ind, lat_ind){
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
subset2
subset2[1:3,1:3]
subset = expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
#subset['pm'] <- NA
subset[] <- lapply(subset, 1, FUN = function(long_ind, lat_ind){
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
subset[] <- lapply(subset, 1, FUN = function(row_subset){
long <- long_subset[row_subset$long]
lat <- lat_subset[row_subset$lat]
pm <- pm_subset[row_subset$long,row_subset$lat]
return(c(long,lat,pm))
})
long_subset<-long_vec[long_row_min:long_row_max]
lat_subset <- lat_vec[lat_row_min:lat_row_max]
pm_subset <- exp_data[long_row_min:long_row_max,lat_row_min:lat_row_max]
subset = expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
subset[] <- lapply(subset, 1, FUN = function(long_ind, lat_ind){
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
subset = expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
subset['pm'] <- NA
subset
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#subset[]
subset <- lapply(subset, 1, FUN = function(long_ind, lat_ind){
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#subset[]
subset <- lapply(subset, 1, FUN = function(long_ind, lat_ind,pm){
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#subset[]
subset <- lapply(subset, 1, FUN = function(long_ind, lat_ind,pm_na){
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#subset[]
subset2 <- lapply(subset, 1, FUN = function(long_ind, lat_ind){
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
long_subset<-long_vec[long_row_min:long_row_max]
lat_subset <- lat_vec[lat_row_min:lat_row_max]
pm_subset <- exp_data[long_row_min:long_row_max,lat_row_min:lat_row_max]
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#subset[]
subset2 <- lapply(subset, 1, FUN = function(long_ind, lat_ind){
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
subset2
subset2[1:3,1:3]
subset2[1:2,1:2]
subset2[1,1]
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#subset[]
subset2 <- lapply(subset, 1, FUN = function(long_ind, lat_ind){
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
subset2<-as.data.frame(subset2)
subset2
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#subset[]
subset2 <- lapply(subset, 2, FUN = function(long_ind, lat_ind){
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
subset2<-as.data.frame(subset2)
subset2
long_subset<-long_vec[long_row_min:long_row_max]
lat_subset <- lat_vec[lat_row_min:lat_row_max]
pm_subset <- exp_data[long_row_min:long_row_max,lat_row_min:lat_row_max]
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- sapply(subset, 1, FUN = function(long_ind, lat_ind){
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
subset2<-as.data.frame(subset2)
subset2
long <- long_subset[long_ind]
long_subset
lat_subset
long_subset<-long_vec[long_row_min:long_row_max]
lat_subset <- lat_vec[lat_row_min:lat_row_max]
pm_subset <- exp_data[long_row_min:long_row_max,lat_row_min:lat_row_max]
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- sapply(subset, 1, FUN = function(long_ind, lat_ind){
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- sapply(subset, 1, FUN = function(long_ind, lat_ind){
print(c(long_ind,lat_ind))
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- sapply(subset, 1, FUN = function(long_ind, lat_ind){
print(c("long",long_ind,"lat",lat_ind))
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
subset
#print(c("long",long_ind,"lat",lat_ind))
long <- long_subset[long_ind]
long
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
long
lat
pm
df = data.frame(
a = c(1, 2, 3),
b = c(4, 5, 6),
c = c(7, 8, 9)
)
process_row = function(row) {
row = row[1,]
new_col_name = paste("[", paste(colnames(row), collapse = "+"), "]", sep = "")
row[[new_col_name]] = sum(row[1,])
return (row)
}
# For Loop
df_list <- vector(mode = "list", length = nrow(df))
for (r_num in 1:nrow(df)) {
df_list[[r_num]] <- process_row(df[r_num, ])
}
df_out_loop <- do.call(rbind, df_list)
# lapply
df_list <- lapply(1:nrow(df), function(r_num) { process_row(df[r_num, ]) })
df_out_lapply <- do.call(rbind, df_list)
# purrr::map_dfr
library(purrr)
df_out_map <- map_dfr(
1:nrow(df),
~ process_row(df[.x, ])
)
df_out_loop
df_out_lapply
df_out_map
?map_dfr
class(df_out_lapply)
# lapply
df_out_lapply <- lapply(1:nrow(df), function(r_num) { process_row(df[r_num, ]) }) %>%
do.call(rbind, .)
df_out_lapply
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
class(long_ind)
long_ind[1]
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- sapply(subset, 1, FUN = function(long_ind, lat_ind){
#print(c("long",long_ind,"lat",lat_ind))
long <- long_subset[long_ind[1]]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
subset2<-as.data.frame(subset2)
subset2
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
return(c(long,lat,pm))
#print(c("long",long_ind,"lat",lat_ind))
long <- long_subset[long_ind[1]]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
pm <- pm_subset[long_ind,lat_ind[1]]
pm <- pm_subset[long_ind,lat_ind[1]]
pm <- pm_subset[long_ind[1],lat_ind]
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- sapply(subset, 1, FUN = function(long_ind, lat_ind){
#print(c("long",long_ind,"lat",lat_ind))
long <- long_subset[long_ind[1]]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind[1],lat_ind]
return(c(long,lat,pm))
})
subset2<-as.data.frame(subset2)
subset2
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
subset
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- apply(subset, 1, FUN = function(long_ind, lat_ind){
#print(c("long",long_ind,"lat",lat_ind))
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
subset2<-as.data.frame(subset2)
subset2
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
long_subset<-long_vec[long_row_min:long_row_max]
long_subset
lat_subset
pm_subset
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
subset
5+7
source('~/Desktop/own_code2/code/02_ass_trac.R')
x<-4
y<- 3
long<- long_subset[1:x] # Koordinaten Longtitude
lat<-lat_subset[1:y] #Koordinaten Lattitude
pm<- pm_subset[1:x,1:y] # Feinstaub belastung von korrespondierenden Koordinaten
ziel <- data.frame(lat = lat_subset, long = rep(long_subset[1], length(x)), pm = pm_subset[1,])
long
long
lat
pm
ziel
#Ansatz
subset <- expand.grid(longX = seq_along(long), latY = seq_along(lat)) %>% #karthesisches Produkt
mutate(pm = pm[longX,latY] ,longX = long[longX], latY = lat[latY])
#Aber: Ausgabe:
subset
# GitHub packages
library(devtools)
library(tigris)
plot(combined)
library(censusapi)
library(tidyverse)
library(tmap)
chi_counties <- c("Cook", "DeKalb", "DuPage", "Grundy", "Lake",
"Kane", "Kendall", "McHenry", "Will County")
chi_tracts <- tracts(state = "IL", county = chi_counties, cb = TRUE)
key <- "d44ca9c0b07372ada0b5243518e89adcc06651ef"
data_from_api <- getCensus(name = "acs/acs5", vintage = 2015,
vars = c("B25077_001E"),
key = key,
region = "tract:*", regionin = "state:17")
?transmute
values <- data_from_api %>%
transmute(GEOID = paste0(state, county, tract),
value = B25077_001E)
chi_joined = geo_join(chi_tracts, values, by = "GEOID")
tm_shape(chi_joined, projection = 26916) +
tm_fill("value", style = "quantile", n = 7, palette = "Greens",
title = "Median home values \nin the Chicago Area") +
tm_legend(bg.color = "white", bg.alpha = 0.6) +
tm_style_gray()
tm_shape(chi_joined, projection = 26916) +
tm_fill("value", style = "quantile", n = 7, palette = "Greens",
title = "Median home values \nin the Chicago Area") +
tm_legend(bg.color = "white", bg.alpha = 0.6) #+
ttm()
tm_shape(chi_joined, projection = 26916) +
tm_fill("value", style = "quantile", n = 7, palette = "Greens",
title = "Median home values \nin the Chicago Area")
tracts
tracts
source('~/Desktop/own_code2/code/02_ass_trac.R')
tracts
tracts <- subset(tracts, select = -c("Geometry"))
tracts <- subset(tracts, select = -"Geometry")
within(tracts, rm('Geometry'))
tracts <- subset(tracts, select = -"geometry")
within(tracts, rm('geometry'))
tracts <-as.data.frame(tracts)
tracts
tracts <- subset(tracts, select = -"geometry")
within(tracts, rm('geometry'))
source('~/Desktop/own_code2/code/02_ass_trac.R')
tracts
##-----save as csv--------
tracts <-tracts %>%
as.data.frame %>%
within(., rm('geometry', 'LSAD', 'CENSUSAREA'))
source('~/Desktop/own_code2/code/02_ass_trac.R')
source('~/Desktop/own_code2/code/00_parent.R')
