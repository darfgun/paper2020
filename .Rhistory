subset2[1,1]
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#subset[]
subset2 <- lapply(subset, 1, FUN = function(long_ind, lat_ind){
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
subset2<-as.data.frame(subset2)
subset2
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#subset[]
subset2 <- lapply(subset, 2, FUN = function(long_ind, lat_ind){
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
subset2<-as.data.frame(subset2)
subset2
long_subset<-long_vec[long_row_min:long_row_max]
lat_subset <- lat_vec[lat_row_min:lat_row_max]
pm_subset <- exp_data[long_row_min:long_row_max,lat_row_min:lat_row_max]
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- sapply(subset, 1, FUN = function(long_ind, lat_ind){
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
subset2<-as.data.frame(subset2)
subset2
long <- long_subset[long_ind]
long_subset
lat_subset
long_subset<-long_vec[long_row_min:long_row_max]
lat_subset <- lat_vec[lat_row_min:lat_row_max]
pm_subset <- exp_data[long_row_min:long_row_max,lat_row_min:lat_row_max]
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- sapply(subset, 1, FUN = function(long_ind, lat_ind){
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- sapply(subset, 1, FUN = function(long_ind, lat_ind){
print(c(long_ind,lat_ind))
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- sapply(subset, 1, FUN = function(long_ind, lat_ind){
print(c("long",long_ind,"lat",lat_ind))
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
subset
#print(c("long",long_ind,"lat",lat_ind))
long <- long_subset[long_ind]
long
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
long
lat
pm
df = data.frame(
a = c(1, 2, 3),
b = c(4, 5, 6),
c = c(7, 8, 9)
)
process_row = function(row) {
row = row[1,]
new_col_name = paste("[", paste(colnames(row), collapse = "+"), "]", sep = "")
row[[new_col_name]] = sum(row[1,])
return (row)
}
# For Loop
df_list <- vector(mode = "list", length = nrow(df))
for (r_num in 1:nrow(df)) {
df_list[[r_num]] <- process_row(df[r_num, ])
}
df_out_loop <- do.call(rbind, df_list)
# lapply
df_list <- lapply(1:nrow(df), function(r_num) { process_row(df[r_num, ]) })
df_out_lapply <- do.call(rbind, df_list)
# purrr::map_dfr
library(purrr)
df_out_map <- map_dfr(
1:nrow(df),
~ process_row(df[.x, ])
)
df_out_loop
df_out_lapply
df_out_map
?map_dfr
class(df_out_lapply)
# lapply
df_out_lapply <- lapply(1:nrow(df), function(r_num) { process_row(df[r_num, ]) }) %>%
do.call(rbind, .)
df_out_lapply
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
class(long_ind)
long_ind[1]
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- sapply(subset, 1, FUN = function(long_ind, lat_ind){
#print(c("long",long_ind,"lat",lat_ind))
long <- long_subset[long_ind[1]]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
subset2<-as.data.frame(subset2)
subset2
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
return(c(long,lat,pm))
#print(c("long",long_ind,"lat",lat_ind))
long <- long_subset[long_ind[1]]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
pm <- pm_subset[long_ind,lat_ind[1]]
pm <- pm_subset[long_ind,lat_ind[1]]
pm <- pm_subset[long_ind[1],lat_ind]
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- sapply(subset, 1, FUN = function(long_ind, lat_ind){
#print(c("long",long_ind,"lat",lat_ind))
long <- long_subset[long_ind[1]]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind[1],lat_ind]
return(c(long,lat,pm))
})
subset2<-as.data.frame(subset2)
subset2
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
subset
#subset['pm'] <- NA
#https://stackoverflow.com/questions/48662248/apply-function-to-every-element-in-data-frame-and-return-data-frame/48662359
#https://community.rstudio.com/t/apply-function-to-each-row-in-a-df-and-create-a-new-df-with-the-outputs/38946/4
#subset[]
subset2 <- apply(subset, 1, FUN = function(long_ind, lat_ind){
#print(c("long",long_ind,"lat",lat_ind))
long <- long_subset[long_ind]
lat <- lat_subset[lat_ind]
pm <- pm_subset[long_ind,lat_ind]
return(c(long,lat,pm))
})
subset2<-as.data.frame(subset2)
subset2
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
long_subset<-long_vec[long_row_min:long_row_max]
long_subset
lat_subset
pm_subset
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset))
subset
debugSource('~/Desktop/own_code2/code/02_ass_trac.R')
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset)) %>%
mutate(long = long_subset[long])
subset
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset)) %>%
mutate(long = long_subset[long], lat = lat_subset[lat_ind])
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset)) %>%
mutate(long = long_subset[long], lat = lat_subset[lat])
subset
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset), pm = Integer()) %>%
mutate(long = long_subset[long], lat = lat_subset[lat])
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset), pm = Integer) %>%
mutate(long = long_subset[long], lat = lat_subset[lat])
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset), pm = double()) %>%
mutate(long = long_subset[long], lat = lat_subset[lat])
subset
long_subset<-long_vec[long_row_min:long_row_max]
lat_subset <- lat_vec[lat_row_min:lat_row_max]
pm_subset <- exp_data[long_row_min:long_row_max,lat_row_min:lat_row_max]
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset), pm = double()) %>%
mutate(long = long_subset[long], lat = lat_subset[lat])
subset
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset)) %>%
mutate(long = long_subset[long], lat = lat_subset[lat])
subset
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset), pm = integer()) #%>%
subset
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset), pm = NA) #%>%
subset
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset), pm = NA) %>%
mutate(long = long_subset[long], lat = lat_subset[lat], pm = pm_subset[long,lat])
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset), pm = NA) %>%
mutate(long = long_subset[long], lat = lat_subset[lat], pm = pm_subset[lat,long])
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset), pm = NA) %>%
mutate(pm = pm_subset[lat,long],long = long_subset[long], lat = lat_subset[lat])
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset), pm = NA) %>%
mutate(pm = pm_subset[lat,long]) #,long = long_subset[long], lat = lat_subset[lat]
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset), pm = NA) %>%
mutate(pm = pm_subset[long,lat]) #,long = long_subset[long], lat = lat_subset[lat]
subset
subset <- expand.grid(longX = seq_along(long_subset), latX = seq_along(lat_subset), pm = NA) %>%
mutate(pm = pm_subset[longX,latX]) #,long = long_subset[long], lat = lat_subset[lat]
subset
subset <- expand.grid(longX = seq_along(long_subset), latX = seq_along(lat_subset), pm = NA) %>%
mutate(pm = pm_subset[[longX,latX]]) #,long = long_subset[long], lat = lat_subset[lat]
?mutate
subset <- expand.grid(longX = seq_along(long_subset), latX = seq_along(lat_subset), pm = 0) %>%
mutate(pm = pm_subset[longX,latX]) #,long = long_subset[long], lat = lat_subset[lat]
subset
subset <- expand.grid(longX = seq_along(long_subset), latX = seq_along(lat_subset)) %>%
mutate(pm = pm_subset[longX,latX]) #,long = long_subset[long], lat = lat_subset[lat]
subset
pm_subset
long_subset
lat_subset
pm_subset
ziel <- data.frame(lat = lat_subset)
ziel
ziel <- data.frame(lat = lat_subset, long = rep(long_subset[1], 7))
ziel
pm_subset[1,]
long
long<- long_subset # Koordinaten Longtitude
lat<-lat_subset #Koordinaten Lattitude
pm<- pm_subset # Feinstaub belastung von korrespondierenden Koordinaten
long
lat
pm
ziel <- data.frame(lat = lat_subset, long = rep(long_subset[1], 7), pm = pm_subset[1,])
ziel
"..."
long<- long_subset[1:4] # Koordinaten Longtitude
lat<-lat_subset[1:3] #Koordinaten Lattitude
pm<- pm_subset[1:3,] # Feinstaub belastung von korrespondierenden Koordinaten
ziel <- data.frame(lat = lat_subset, long = rep(long_subset[1], length(long)), pm = pm_subset[1,])
x<-4
y<- 3
long<- long_subset[1:x] # Koordinaten Longtitude
lat<-lat_subset[1:y] #Koordinaten Lattitude
pm<- pm_subset[1:x,1:y] # Feinstaub belastung von korrespondierenden Koordinaten
ziel <- data.frame(lat = lat_subset, long = rep(long_subset[1], length(x)), pm = pm_subset[1,])
long
lat
pm
ziel
#Ansatz
subset <- expand.grid(long = seq_along(long_subset), lat = seq_along(lat_subset)) %>%
mutate(pm = pm_subset[longX,latX] ,long = long_subset[long], lat = lat_subset[lat])
#Ansatz
subset <- expand.grid(longX = seq_along(long), latY = seq_along(lat)) %>%
mutate(pm = pm_subset[longX,latX] ,longX = long[longX], latY = lat[latY])
#Aber: Ausgabe:
subset
#Ansatz
subset <- expand.grid(longX = seq_along(long), latY = seq_along(lat)) %>%
mutate(pm = pm[longX,latX] ,longX = long[longX], latY = lat[latY])
#Ansatz
subset <- expand.grid(longX = seq_along(long), latY = seq_along(lat)) %>%
mutate(pm = pm[longX,latX] ,longX = long[longX], latY = lat[latY])
#Ansatz
subset <- expand.grid(longX = seq_along(long), latY = seq_along(lat)) %>%
mutate(pm = pm[longX,latY] ,longX = long[longX], latY = lat[latY])
#Aber: Ausgabe:
subset
zz <- file("all.Rout", open = "wt")
sink(zz)
sink(zz, type = "message")
setwd("~/Desktop")
zz <- file("all.Rout", open = "wt")
sink(zz)
sink(zz, type = "message")
long
lat
long<- long_subset[1:x] # Koordinaten Longtitude
lat<-lat_subset[1:y] #Koordinaten Lattitude
pm<- pm_subset[1:x,1:y] # Feinstaub belastung von korrespondierenden Koordinaten
ziel <- data.frame(lat = lat_subset, long = rep(long_subset[1], length(x)), pm = pm_subset[1,])
long
source('~/Desktop/own_code2/code/02_ass_trac.R')
source('~/Desktop/test.R')
source('~/Desktop/test.R')
x<-4
y<- 3
long<- long_subset[1:x] # Koordinaten Longtitude
lat<-lat_subset[1:y] #Koordinaten Lattitude
pm<- pm_subset[1:x,1:y] # Feinstaub belastung von korrespondierenden Koordinaten
ziel <- data.frame(lat = lat_subset, long = rep(long_subset[1], length(x)), pm = pm_subset[1,])
long
long
long
## revert output back to the console -- only then access the file!
sink(type = "message")
sink()
file.show("all.Rout")
long
source('~/Desktop/test.R')
tm_shape(World) +
tm_polygons("HPI")
tm_shape(World)
library(tmap)
data("World")
tm_shape(World)
tmap_mode("view")
tm_shape(World) +
tm_polygons("HPI")
data(World, metro, rivers, land)
tmap_mode("plot")
## tmap mode set to plotting
tm_shape(land) +
tm_raster("elevation", palette = terrain.colors(10)) +
tm_shape(World) +
tm_borders("white", lwd = .5) +
tm_text("iso_a3", size = "AREA") +
tm_shape(metro) +
tm_symbols(col = "red", size = "pop2020", scale = .5) +
tm_legend(show = FALSE)
tmap_mode("view")
tm_shape(World) +
tm_polygons(c("HPI", "economy")) +
tm_facets(sync = TRUE, ncol = 2)
tmap_mode("plot")
data(NLD_muni)
NLD_muni$perc_men <- NLD_muni$pop_men / NLD_muni$population * 100
tm_shape(NLD_muni) +
tm_polygons("perc_men", palette = "RdYlBu") +
tm_facets(by = "province")
tmap_mode("plot")
data(NLD_muni)
tm1 <- tm_shape(NLD_muni) + tm_polygons("population", convert2density = TRUE)
tm2 <- tm_shape(NLD_muni) + tm_bubbles(size = "population")
tmap_arrange(tm1, tm2)
tmap_mode("view")
tm_basemap("Stamen.Watercolor") +
tm_shape(metro) + tm_bubbles(size = "pop2020", col = "red") +
tm_tiles("Stamen.TonerLabels")
tm_shape(nz) +
tm_fill()
library(sf)
library(raster)
library(dplyr)
library(spData)
library(spDataLarge)
tm_shape(nz) +
tm_fill()
library(sf)
library(raster)
library(dplyr)
library(spData)
library(spDataLarge)
tm_shape(nz) +
tm_fill()
tmap_mode("plot")
tm_shape(nz) +
tm_fill()
map_nz1 = map_nz +
tm_shape(nz_elev) + tm_raster(alpha = 0.7)
map_nz = tm_shape(nz) + tm_polygons()
map_nz1 = map_nz +
tm_shape(nz_elev) + tm_raster(alpha = 0.7)
source('~/Desktop/own_code2/code/02_ass_trac.R')
plot(st_geometry(tracts), col = tracts$pm)
#gg <- ggplot()+ geom_sf(data = tracts, color="black",fill="white")
plot(tracts)
#gg <- ggplot()+ geom_sf(data = tracts, color="black",fill="white")
plot(tracts$geometry)
plot(st_geometry(tracts))
#TODO save plot
tm_shape(tracts) #+ tm_fill(col = "Land_area")
#TODO save plot
tm_shape(tracts) + tm_fill(col = "pm")
#TODO save plot
tmap_mode("plot")
tracts$pm
tm_shape(tracts) +
tm_polygons("pm")
tm_shape(tracts, projection = 26916) +
tm_fill("pm", style = "quantile", n = 7, palette = "Greens",
title = "Median home values \nin the Chicago Area") +
tm_legend(bg.color = "white", bg.alpha = 0.6)
class(tracts)
source('~/Desktop/own_code2/code/02_ass_trac.R')
source('~/Desktop/own_code2/code/02_ass_trac.R')
source('~/Desktop/own_code2/code/02_ass_trac.R')
gg <- ggplot()+ geom_sf(data = tracts, color="black",fill="white")
gg
class(tracts)
gg <- ggplot()
gg
gg <- ggplot()
+ geom_sf(data = tracts, color="black",fill="white")
gg <- ggplot()
+ geom_sf(data = tracts, color="black",fill="white")
gg
gg <- ggplot()+ geom_sf(data = tracts, color="black",fill="white")
gg
#TODO save plot
tmap_mode("plot")
tm_shape(tracts) + tm_fill(col = "pm")
tm_shape(tracts)
tm_shape(tracts)
+ tm_fill(col = "pm")
+tm_borders()
tm_shape(tracts)
+tm_borders()
+ tm_fill(col = "pm")
tm_shape(tracts) +
tm_polygons("pm")
#TODO save plot
tmap_mode("view")
tm_shape(tracts) +
tm_polygons("pm")
tm<-tm_shape(tracts) +
tm_polygons("pm")
filenameExpTrac_plot<-paste("exp_trac",toString(year),".png", sep = "")
filepathExpTrac_plot <- file.path(exp_tracDir, filenameExpTrac_plot)
tmap_save(tm, filename = filepathExpTrac_plot) #png möglich
filenameExpTrac_plot<-paste("exp_trac",toString(year),".html", sep = "") #png/html möglich
filepathExpTrac_plot <- file.path(exp_tracDir, filenameExpTrac_plot)
tmap_save(tm, filename = filepathExpTrac_plot)
source('~/Desktop/own_code2/code/02_ass_trac.R')
?tm_polygons
source('~/Desktop/own_code2/code/02_ass_trac.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/02_ass_trac.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
packages <- c("plyr","magrittr", "tigris", "sf", "tidyverse", "ggplot2", "sp","tmap","tictoc")
options(tidyverse.quiet = TRUE)
options(tigris_use_cache = FALSE)
for(p in packages){
if(p %in% rownames(installed.packages())==FALSE){
install.packages(p)
}
suppressWarnings(library(p, character.only = T, warn.conflicts=FALSE))
}
source('~/Desktop/own_code2/code/00_parent.R')
options(tigris.quiet = TRUE)
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/02_ass_trac.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
source('~/Desktop/own_code2/code/00_parent.R')
states()
states()[,Region:name]
states()[,REGION:NAME]
states()[,REGION]
states()[REGION,]
states()%>% filter("Region")
?filter
?filter
?pull
states()%>% pull("Region")
head(states)
head(states())
states()%>% pull("REGION")
states()%>% pull("REGION","DIVISION","STATEFP","GEOID","NAME")
states()%>% pull(REGION)
states()%>% pull(REGION, DIVISION)
states()%>% pull(REGION, DIVISION,NAME)
states()%>% pull(REGION, NAME)
states()%>% as.data.frame %>% pull(REGION, NAME)
